--- ../src-base/minecraft/net/minecraft/block/Block.java
+++ ../src-work/minecraft/net/minecraft/block/Block.java
@@ -1,10 +1,7 @@
 package net.minecraft.block;
 
-import com.google.common.collect.Sets;
-import com.google.common.collect.UnmodifiableIterator;
 import java.util.List;
 import java.util.Random;
-import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
@@ -21,6 +18,7 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Enchantments;
 import net.minecraft.init.Items;
@@ -573,7 +571,8 @@
 
             for (ItemStack drop : drops)
             {
-                if (worldIn.rand.nextFloat() <= chance)
+                // CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
+                if (worldIn.rand.nextFloat() < chance)
                 {
                     spawnAsEntity(worldIn, pos, drop);
                 }
@@ -596,12 +595,27 @@
             double d2 = (double)(worldIn.rand.nextFloat() * 0.5F) + 0.25D;
             EntityItem entityitem = new EntityItem(worldIn, (double)pos.getX() + d0, (double)pos.getY() + d1, (double)pos.getZ() + d2, stack);
             entityitem.setDefaultPickupDelay();
-            worldIn.spawnEntity(entityitem);
+            if (worldIn.captureDrops != null) {
+                worldIn.captureDrops.add(entityitem);
+            } else {
+                worldIn.spawnEntity(entityitem);
+            }
         }
     }
 
+    // CraftBukkit start
+    public int getExpDrop(World world, IBlockState state, int enchantmentLevel) {
+        return 0;
+    }
+    // CraftBukkit end
+
     public void dropXpOnBlockBreak(World worldIn, BlockPos pos, int amount)
     {
+        dropXpOnBlockBreak(worldIn, pos, amount, null);
+    }
+
+    public void dropXpOnBlockBreak(World worldIn, BlockPos pos, int amount, EntityPlayerMP player)
+    {
         if (!worldIn.isRemote && worldIn.getGameRules().getBoolean("doTileDrops"))
         {
             while (amount > 0)
@@ -714,7 +728,7 @@
 
         if (this.canSilkHarvest(worldIn, pos, state, player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, stack) > 0)
         {
-            java.util.List<ItemStack> items = new java.util.ArrayList<ItemStack>();
+            List<ItemStack> items = new java.util.ArrayList<ItemStack>();
             ItemStack itemstack = this.getSilkTouchDrop(state);
 
             if (!itemstack.isEmpty())
@@ -915,24 +929,24 @@
         return this.defaultBlockState;
     }
 
-    public Block.EnumOffsetType getOffsetType()
+    public EnumOffsetType getOffsetType()
     {
-        return Block.EnumOffsetType.NONE;
+        return EnumOffsetType.NONE;
     }
 
     @Deprecated
     public Vec3d getOffset(IBlockState state, IBlockAccess worldIn, BlockPos pos)
     {
-        Block.EnumOffsetType block$enumoffsettype = this.getOffsetType();
+        EnumOffsetType block$enumoffsettype = this.getOffsetType();
 
-        if (block$enumoffsettype == Block.EnumOffsetType.NONE)
+        if (block$enumoffsettype == EnumOffsetType.NONE)
         {
             return Vec3d.ZERO;
         }
         else
         {
             long i = MathHelper.getCoordinateRandom(pos.getX(), 0, pos.getZ());
-            return new Vec3d(((double)((float)(i >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D, block$enumoffsettype == Block.EnumOffsetType.XYZ ? ((double)((float)(i >> 20 & 15L) / 15.0F) - 1.0D) * 0.2D : 0.0D, ((double)((float)(i >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D);
+            return new Vec3d(((double)((float)(i >> 16 & 15L) / 15.0F) - 0.5D) * 0.5D, block$enumoffsettype == EnumOffsetType.XYZ ? ((double)((float)(i >> 20 & 15L) / 15.0F) - 1.0D) * 0.2D : 0.0D, ((double)((float)(i >> 24 & 15L) / 15.0F) - 0.5D) * 0.5D);
         }
     }
 
@@ -956,7 +970,7 @@
     //For ForgeInternal use Only!
     protected ThreadLocal<EntityPlayer> harvesters = new ThreadLocal();
     private ThreadLocal<IBlockState> silk_check_state = new ThreadLocal();
-    protected static java.util.Random RANDOM = new java.util.Random(); // Useful for random things without a seed.
+    protected static Random RANDOM = new Random(); // Useful for random things without a seed.
 
     /**
      * Gets the slipperiness at the given location at the given state. Normally
@@ -1176,7 +1190,7 @@
     public boolean removedByPlayer(IBlockState state, World world, BlockPos pos, EntityPlayer player, boolean willHarvest)
     {
         this.onBlockHarvested(world, pos, state, player);
-        return world.setBlockState(pos, net.minecraft.init.Blocks.AIR.getDefaultState(), world.isRemote ? 11 : 3);
+        return world.setBlockState(pos, Blocks.AIR.getDefaultState(), world.isRemote ? 11 : 3);
     }
 
     /**
@@ -1190,7 +1204,7 @@
      */
     public int getFlammability(IBlockAccess world, BlockPos pos, EnumFacing face)
     {
-        return net.minecraft.init.Blocks.FIRE.getFlammability(this);
+        return Blocks.FIRE.getFlammability(this);
     }
 
     /**
@@ -1218,7 +1232,7 @@
      */
     public int getFireSpreadSpeed(IBlockAccess world, BlockPos pos, EnumFacing face)
     {
-        return net.minecraft.init.Blocks.FIRE.getEncouragement(this);
+        return Blocks.FIRE.getEncouragement(this);
     }
 
     /**
@@ -1370,7 +1384,7 @@
      */
     public boolean isBed(IBlockState state, IBlockAccess world, BlockPos pos, @Nullable Entity player)
     {
-        return this == net.minecraft.init.Blocks.BED;
+        return this == Blocks.BED;
     }
 
     /**
@@ -1564,18 +1578,13 @@
      */
     public boolean canPlaceTorchOnTop(IBlockState state, IBlockAccess world, BlockPos pos)
     {
-        if (this == Blocks.END_GATEWAY || this == Blocks.LIT_PUMPKIN)
+        if (state.isTopSolid() || state.getBlockFaceShape(world, pos, EnumFacing.UP) == BlockFaceShape.SOLID)
         {
-            return false;
+            return this != Blocks.END_GATEWAY && this != Blocks.LIT_PUMPKIN;
         }
-        else if (state.isTopSolid() || this instanceof BlockFence || this == Blocks.GLASS || this == Blocks.COBBLESTONE_WALL || this == Blocks.STAINED_GLASS)
-        {
-            return true;
-        }
         else
         {
-            BlockFaceShape shape = state.getBlockFaceShape(world, pos, EnumFacing.UP);
-            return (shape == BlockFaceShape.SOLID || shape == BlockFaceShape.CENTER || shape == BlockFaceShape.CENTER_BIG) && !isExceptionBlockForAttaching(this);
+            return this instanceof BlockFence || this == Blocks.GLASS || this == Blocks.COBBLESTONE_WALL || this == Blocks.STAINED_GLASS;
         }
     }
 
@@ -1693,12 +1702,12 @@
         IBlockState plant = plantable.getPlant(world, pos.offset(direction));
         net.minecraftforge.common.EnumPlantType plantType = plantable.getPlantType(world, pos.offset(direction));
 
-        if (plant.getBlock() == net.minecraft.init.Blocks.CACTUS)
+        if (plant.getBlock() == Blocks.CACTUS)
         {
-            return this == net.minecraft.init.Blocks.CACTUS || this == net.minecraft.init.Blocks.SAND;
+            return this == Blocks.CACTUS || this == Blocks.SAND;
         }
 
-        if (plant.getBlock() == net.minecraft.init.Blocks.REEDS && this == net.minecraft.init.Blocks.REEDS)
+        if (plant.getBlock() == Blocks.REEDS && this == Blocks.REEDS)
         {
             return true;
         }
@@ -1710,14 +1719,14 @@
 
         switch (plantType)
         {
-            case Desert: return this == net.minecraft.init.Blocks.SAND || this == net.minecraft.init.Blocks.HARDENED_CLAY || this == net.minecraft.init.Blocks.STAINED_HARDENED_CLAY;
-            case Nether: return this == net.minecraft.init.Blocks.SOUL_SAND;
-            case Crop:   return this == net.minecraft.init.Blocks.FARMLAND;
+            case Desert: return this == Blocks.SAND || this == Blocks.HARDENED_CLAY || this == Blocks.STAINED_HARDENED_CLAY;
+            case Nether: return this == Blocks.SOUL_SAND;
+            case Crop:   return this == Blocks.FARMLAND;
             case Cave:   return state.isSideSolid(world, pos, EnumFacing.UP);
-            case Plains: return this == net.minecraft.init.Blocks.GRASS || this == net.minecraft.init.Blocks.DIRT || this == net.minecraft.init.Blocks.FARMLAND;
+            case Plains: return this == Blocks.GRASS || this == Blocks.DIRT || this == Blocks.FARMLAND;
             case Water:  return state.getMaterial() == Material.WATER && state.getValue(BlockLiquid.LEVEL) == 0;
             case Beach:
-                boolean isBeach = this == net.minecraft.init.Blocks.GRASS || this == net.minecraft.init.Blocks.DIRT || this == net.minecraft.init.Blocks.SAND;
+                boolean isBeach = this == Blocks.GRASS || this == Blocks.DIRT || this == Blocks.SAND;
                 boolean hasWater = (world.getBlockState(pos.east()).getMaterial() == Material.WATER ||
                                     world.getBlockState(pos.west()).getMaterial() == Material.WATER ||
                                     world.getBlockState(pos.north()).getMaterial() == Material.WATER ||
@@ -1744,9 +1753,9 @@
      */
     public void onPlantGrow(IBlockState state, World world, BlockPos pos, BlockPos source)
     {
-        if (this == net.minecraft.init.Blocks.GRASS || this == net.minecraft.init.Blocks.FARMLAND)
+        if (this == Blocks.GRASS || this == Blocks.FARMLAND)
         {
-            world.setBlockState(pos, net.minecraft.init.Blocks.DIRT.getDefaultState(), 2);
+            world.setBlockState(pos, Blocks.DIRT.getDefaultState(), 2);
         }
     }
 
@@ -1761,7 +1770,7 @@
      */
     public boolean isFertile(World world, BlockPos pos)
     {
-        if (this == net.minecraft.init.Blocks.FARMLAND)
+        if (this == Blocks.FARMLAND)
         {
             return ((Integer)world.getBlockState(pos).getValue(BlockFarmland.MOISTURE)) > 0;
         }
@@ -1799,17 +1808,17 @@
     {
         if (entity instanceof net.minecraft.entity.boss.EntityDragon)
         {
-            return this != net.minecraft.init.Blocks.BARRIER &&
-                   this != net.minecraft.init.Blocks.OBSIDIAN &&
-                   this != net.minecraft.init.Blocks.END_STONE &&
-                   this != net.minecraft.init.Blocks.BEDROCK &&
-                   this != net.minecraft.init.Blocks.END_PORTAL &&
-                   this != net.minecraft.init.Blocks.END_PORTAL_FRAME &&
-                   this != net.minecraft.init.Blocks.COMMAND_BLOCK &&
-                   this != net.minecraft.init.Blocks.REPEATING_COMMAND_BLOCK &&
-                   this != net.minecraft.init.Blocks.CHAIN_COMMAND_BLOCK &&
-                   this != net.minecraft.init.Blocks.IRON_BARS &&
-                   this != net.minecraft.init.Blocks.END_GATEWAY;
+            return this != Blocks.BARRIER &&
+                   this != Blocks.OBSIDIAN &&
+                   this != Blocks.END_STONE &&
+                   this != Blocks.BEDROCK &&
+                   this != Blocks.END_PORTAL &&
+                   this != Blocks.END_PORTAL_FRAME &&
+                   this != Blocks.COMMAND_BLOCK &&
+                   this != Blocks.REPEATING_COMMAND_BLOCK &&
+                   this != Blocks.CHAIN_COMMAND_BLOCK &&
+                   this != Blocks.IRON_BARS &&
+                   this != Blocks.END_GATEWAY;
         }
         else if ((entity instanceof net.minecraft.entity.boss.EntityWither) ||
                  (entity instanceof net.minecraft.entity.projectile.EntityWitherSkull))
@@ -1830,7 +1839,7 @@
      */
     public boolean isBeaconBase(IBlockAccess worldObj, BlockPos pos, BlockPos beacon)
     {
-        return this == net.minecraft.init.Blocks.EMERALD_BLOCK || this == net.minecraft.init.Blocks.GOLD_BLOCK || this == net.minecraft.init.Blocks.DIAMOND_BLOCK || this == net.minecraft.init.Blocks.IRON_BLOCK;
+        return this == Blocks.EMERALD_BLOCK || this == Blocks.GOLD_BLOCK || this == Blocks.DIAMOND_BLOCK || this == Blocks.IRON_BLOCK;
     }
 
     /**
@@ -1918,7 +1927,7 @@
      */
     public float getEnchantPowerBonus(World world, BlockPos pos)
     {
-        return this == net.minecraft.init.Blocks.BOOKSHELF ? 1 : 0;
+        return this == Blocks.BOOKSHELF ? 1 : 0;
     }
 
     /**
@@ -1930,14 +1939,14 @@
      * @return If the recoloring was successful
      */
     @SuppressWarnings({ "unchecked", "rawtypes" })
-    public boolean recolorBlock(World world, BlockPos pos, EnumFacing side, net.minecraft.item.EnumDyeColor color)
+    public boolean recolorBlock(World world, BlockPos pos, EnumFacing side, EnumDyeColor color)
     {
         IBlockState state = world.getBlockState(pos);
         for (IProperty prop : state.getProperties().keySet())
         {
-            if (prop.getName().equals("color") && prop.getValueClass() == net.minecraft.item.EnumDyeColor.class)
+            if (prop.getName().equals("color") && prop.getValueClass() == EnumDyeColor.class)
             {
-                net.minecraft.item.EnumDyeColor current = (net.minecraft.item.EnumDyeColor)state.getValue(prop);
+                EnumDyeColor current = (EnumDyeColor)state.getValue(prop);
                 if (current != color && prop.getAllowedValues().contains(color))
                 {
                     world.setBlockState(pos, state.withProperty(prop, color));
@@ -2074,7 +2083,7 @@
      */
     public boolean isToolEffective(String type, IBlockState state)
     {
-        if ("pickaxe".equals(type) && (this == net.minecraft.init.Blocks.REDSTONE_ORE || this == net.minecraft.init.Blocks.LIT_REDSTONE_ORE || this == net.minecraft.init.Blocks.OBSIDIAN))
+        if ("pickaxe".equals(type) && (this == Blocks.REDSTONE_ORE || this == Blocks.LIT_REDSTONE_ORE || this == Blocks.OBSIDIAN))
             return false;
         return type != null && type.equals(getHarvestTool(state));
     }
@@ -2286,23 +2295,15 @@
         return false;
     }
 
-    /** @deprecated use {@link #getAiPathNodeType(IBlockState, IBlockAccess, BlockPos, net.minecraft.entity.EntityLiving)} */
-    @Nullable
-    @Deprecated // TODO: remove
-    public net.minecraft.pathfinding.PathNodeType getAiPathNodeType(IBlockState state, IBlockAccess world, BlockPos pos)
-    {
-        return isBurning(world, pos) ? net.minecraft.pathfinding.PathNodeType.DAMAGE_FIRE : null;
-    }
-
     /**
      * Get the {@code PathNodeType} for this block. Return {@code null} for vanilla behavior.
      *
      * @return the PathNodeType
      */
     @Nullable
-    public net.minecraft.pathfinding.PathNodeType getAiPathNodeType(IBlockState state, IBlockAccess world, BlockPos pos, @Nullable net.minecraft.entity.EntityLiving entity)
+    public net.minecraft.pathfinding.PathNodeType getAiPathNodeType(IBlockState state, IBlockAccess world, BlockPos pos)
     {
-        return getAiPathNodeType(state, world, pos);
+        return isBurning(world, pos) ? net.minecraft.pathfinding.PathNodeType.DAMAGE_FIRE : null;
     }
 
     /**
@@ -2642,6 +2643,18 @@
         registerBlock(id, new ResourceLocation(textualID), block_);
     }
 
+    // Spigot start
+    public static float range(float min, float value, float max) {
+        if (value < min) {
+            return min;
+        }
+        if (value > max) {
+            return max;
+        }
+        return value;
+    }
+    // Spigot end
+
     public static enum EnumOffsetType
     {
         NONE,
