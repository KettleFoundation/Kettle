--- ../src-base/minecraft/net/minecraft/block/BlockRailDetector.java
+++ ../src-work/minecraft/net/minecraft/block/BlockRailDetector.java
@@ -22,14 +22,18 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import org.bukkit.event.block.BlockRedstoneEvent;
 
+import net.minecraft.block.BlockRailBase.EnumRailDirection;
+import net.minecraft.block.BlockRailBase.Rail;
+
 public class BlockRailDetector extends BlockRailBase
 {
-    public static final PropertyEnum<BlockRailBase.EnumRailDirection> SHAPE = PropertyEnum.<BlockRailBase.EnumRailDirection>create("shape", BlockRailBase.EnumRailDirection.class, new Predicate<BlockRailBase.EnumRailDirection>()
+    public static final PropertyEnum<EnumRailDirection> SHAPE = PropertyEnum.<EnumRailDirection>create("shape", EnumRailDirection.class, new Predicate<EnumRailDirection>()
     {
-        public boolean apply(@Nullable BlockRailBase.EnumRailDirection p_apply_1_)
+        public boolean apply(@Nullable EnumRailDirection p_apply_1_)
         {
-            return p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_WEST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_WEST;
+            return p_apply_1_ != EnumRailDirection.NORTH_EAST && p_apply_1_ != EnumRailDirection.NORTH_WEST && p_apply_1_ != EnumRailDirection.SOUTH_EAST && p_apply_1_ != EnumRailDirection.SOUTH_WEST;
         }
     });
     public static final PropertyBool POWERED = PropertyBool.create("powered");
@@ -37,7 +41,7 @@
     public BlockRailDetector()
     {
         super(true);
-        this.setDefaultState(this.blockState.getBaseState().withProperty(POWERED, Boolean.valueOf(false)).withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(POWERED, Boolean.valueOf(false)).withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH));
         this.setTickRandomly(true);
     }
 
@@ -102,6 +106,13 @@
             flag1 = true;
         }
 
+        if (flag != flag1) {
+            org.bukkit.block.Block block = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, flag ? 15 : 0, flag1 ? 15 : 0);
+            worldIn.getServer().getPluginManager().callEvent(eventRedstone);
+            flag1 = eventRedstone.getNewCurrent() > 0;
+        }
+
         if (flag1 && !flag)
         {
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(true)), 3);
@@ -130,7 +141,7 @@
 
     protected void updateConnectedRails(World worldIn, BlockPos pos, IBlockState state, boolean powered)
     {
-        BlockRailBase.Rail blockrailbase$rail = new BlockRailBase.Rail(worldIn, pos, state);
+        Rail blockrailbase$rail = new Rail(worldIn, pos, state);
 
         for (BlockPos blockpos : blockrailbase$rail.getConnectedRails())
         {
@@ -149,7 +160,7 @@
         this.updatePoweredState(worldIn, pos, state);
     }
 
-    public IProperty<BlockRailBase.EnumRailDirection> getShapeProperty()
+    public IProperty<EnumRailDirection> getShapeProperty()
     {
         return SHAPE;
     }
@@ -197,13 +208,13 @@
 
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
+        return this.getDefaultState().withProperty(SHAPE, EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i = i | ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).getMetadata();
+        i = i | ((EnumRailDirection)state.getValue(SHAPE)).getMetadata();
 
         if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
@@ -220,76 +231,76 @@
         {
             case CLOCKWISE_180:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                 }
 
             case COUNTERCLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                 }
 
             case CLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                 }
 
             default:
@@ -300,7 +311,7 @@
     @SuppressWarnings("incomplete-switch")
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
+        EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection)state.getValue(SHAPE);
 
         switch (mirrorIn)
         {
@@ -309,17 +320,17 @@
                 switch (blockrailbase$enumraildirection)
                 {
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     default:
                         return super.withMirror(state, mirrorIn);
                 }
@@ -329,21 +340,21 @@
                 switch (blockrailbase$enumraildirection)
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                 }
         }
 
