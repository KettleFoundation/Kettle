--- ../src-base/minecraft/net/minecraft/block/BlockSkull.java
+++ ../src-work/minecraft/net/minecraft/block/BlockSkull.java
@@ -40,6 +40,8 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 
 public class BlockSkull extends BlockContainer
 {
@@ -128,6 +130,30 @@
         return new ItemStack(Items.SKULL, 1, i);
     }
 
+    // CraftBukkit start - Special case dropping so we can get info from the tile entity
+    @Override
+    public void dropBlockAsItemWithChance(World worldIn, BlockPos pos, IBlockState state, float chance, int fortune) {
+        if (worldIn.rand.nextFloat() < chance) {
+            TileEntity tileentity = worldIn.getTileEntity(pos);
+
+            if (tileentity instanceof TileEntitySkull) {
+                TileEntitySkull tileentityskull = (TileEntitySkull) tileentity;
+                ItemStack itemstack = this.getItem(worldIn, pos, state);
+
+                if (tileentityskull.getSkullType() == 3 && tileentityskull.getPlayerProfile() != null) {
+                    itemstack.setTagCompound(new NBTTagCompound());
+                    NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+                    NBTUtil.writeGameProfile(nbttagcompound, tileentityskull.getPlayerProfile());
+                    itemstack.getTagCompound().setTag("SkullOwner", nbttagcompound);
+                }
+
+                spawnAsEntity(worldIn, pos, itemstack);
+            }
+        }
+    }
+    // CraftBukkit end
+
     public void onBlockHarvested(World worldIn, BlockPos pos, IBlockState state, EntityPlayer player)
     {
         if (player.capabilities.isCreativeMode)
@@ -147,7 +173,9 @@
     public void getDrops(net.minecraft.util.NonNullList<ItemStack> drops, IBlockAccess worldIn, BlockPos pos, IBlockState state, int fortune)
     {
         {
-            if (!((Boolean)state.getValue(NODROP)).booleanValue())
+            // CraftBukkit start - Drop item in code above, not here
+            // if (!((Boolean)state.getValue(NODROP)).booleanValue())
+            if (false)
             {
                 TileEntity tileentity = worldIn.getTileEntity(pos);
 
@@ -189,6 +217,7 @@
 
     public void checkWitherSpawn(World worldIn, BlockPos pos, TileEntitySkull te)
     {
+        if (worldIn.captureBlockStates) return;
         if (te.getSkullType() == 1 && pos.getY() >= 2 && worldIn.getDifficulty() != EnumDifficulty.PEACEFUL && !worldIn.isRemote)
         {
             BlockPattern blockpattern = this.getWitherPattern();
@@ -196,10 +225,14 @@
 
             if (blockpattern$patternhelper != null)
             {
+                BlockStateListPopulator blockList = new BlockStateListPopulator(worldIn.getWorld());
                 for (int i = 0; i < 3; ++i)
                 {
                     BlockWorldState blockworldstate = blockpattern$patternhelper.translateOffset(i, 0, 0);
-                    worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
+                    BlockPos pos1 = blockworldstate.getPos();
+                    IBlockState data = blockworldstate.getBlockState().withProperty(BlockSkull.NODROP, true);
+                    blockList.setTypeAndData(pos1.getX(), pos1.getY(), pos1.getZ(), data.getBlock(), data.getBlock().getMetaFromState(data), 2);
+//                    worldIn.setBlockState(blockworldstate.getPos(), blockworldstate.getBlockState().withProperty(NODROP, Boolean.valueOf(true)), 2);
                 }
 
                 for (int j = 0; j < blockpattern.getPalmLength(); ++j)
@@ -207,7 +240,10 @@
                     for (int k = 0; k < blockpattern.getThumbLength(); ++k)
                     {
                         BlockWorldState blockworldstate1 = blockpattern$patternhelper.translateOffset(j, k, 0);
-                        worldIn.setBlockState(blockworldstate1.getPos(), Blocks.AIR.getDefaultState(), 2);
+                        BlockPos pos1 = blockworldstate1.getPos();
+                        blockList.setTypeAndData(pos1.getX(), pos1.getY(), pos1.getZ(), Blocks.AIR, 0, 2);
+//                        worldIn.setBlockState(blockworldstate1.getPos(), Blocks.AIR.getDefaultState(), 2);
+
                     }
                 }
 
@@ -217,25 +253,24 @@
                 entitywither.setLocationAndAngles((double)blockpos1.getX() + 0.5D, (double)blockpos1.getY() + 0.55D, (double)blockpos1.getZ() + 0.5D, blockpattern$patternhelper.getForwards().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F, 0.0F);
                 entitywither.renderYawOffset = blockpattern$patternhelper.getForwards().getAxis() == EnumFacing.Axis.X ? 0.0F : 90.0F;
                 entitywither.ignite();
+                if (worldIn.spawnEntity(entitywither, CreatureSpawnEvent.SpawnReason.BUILD_WITHER)) {
+                    blockList.updateList();
 
-                for (EntityPlayerMP entityplayermp : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entitywither.getEntityBoundingBox().grow(50.0D)))
-                {
-                    CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayermp, entitywither);
-                }
+                    for (EntityPlayerMP entityplayermp : worldIn.getEntitiesWithinAABB(EntityPlayerMP.class, entitywither.getEntityBoundingBox().grow(50.0D))) {
+                        CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayermp, entitywither);
+                    }
 
-                worldIn.spawnEntity(entitywither);
+//                worldIn.spawnEntity(entitywither);
 
-                for (int l = 0; l < 120; ++l)
-                {
-                    worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double)blockpos.getX() + worldIn.rand.nextDouble(), (double)(blockpos.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double)blockpos.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
-                }
+                    for (int l = 0; l < 120; ++l) {
+                        worldIn.spawnParticle(EnumParticleTypes.SNOWBALL, (double) blockpos.getX() + worldIn.rand.nextDouble(), (double) (blockpos.getY() - 2) + worldIn.rand.nextDouble() * 3.9D, (double) blockpos.getZ() + worldIn.rand.nextDouble(), 0.0D, 0.0D, 0.0D);
+                    }
 
-                for (int i1 = 0; i1 < blockpattern.getPalmLength(); ++i1)
-                {
-                    for (int j1 = 0; j1 < blockpattern.getThumbLength(); ++j1)
-                    {
-                        BlockWorldState blockworldstate2 = blockpattern$patternhelper.translateOffset(i1, j1, 0);
-                        worldIn.notifyNeighborsRespectDebug(blockworldstate2.getPos(), Blocks.AIR, false);
+                    for (int i1 = 0; i1 < blockpattern.getPalmLength(); ++i1) {
+                        for (int j1 = 0; j1 < blockpattern.getThumbLength(); ++j1) {
+                            BlockWorldState blockworldstate2 = blockpattern$patternhelper.translateOffset(i1, j1, 0);
+                            worldIn.notifyNeighborsRespectDebug(blockworldstate2.getPos(), Blocks.AIR, false);
+                        }
                     }
                 }
             }
