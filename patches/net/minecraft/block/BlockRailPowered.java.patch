--- ../src-base/minecraft/net/minecraft/block/BlockRailPowered.java
+++ ../src-work/minecraft/net/minecraft/block/BlockRailPowered.java
@@ -11,14 +11,17 @@
 import net.minecraft.util.Rotation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
+import net.minecraft.block.BlockRailBase.EnumRailDirection;
+
 public class BlockRailPowered extends BlockRailBase
 {
-    public static final PropertyEnum<BlockRailBase.EnumRailDirection> SHAPE = PropertyEnum.<BlockRailBase.EnumRailDirection>create("shape", BlockRailBase.EnumRailDirection.class, new Predicate<BlockRailBase.EnumRailDirection>()
+    public static final PropertyEnum<EnumRailDirection> SHAPE = PropertyEnum.<EnumRailDirection>create("shape", EnumRailDirection.class, new Predicate<EnumRailDirection>()
     {
-        public boolean apply(@Nullable BlockRailBase.EnumRailDirection p_apply_1_)
+        public boolean apply(@Nullable EnumRailDirection p_apply_1_)
         {
-            return p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.NORTH_WEST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_EAST && p_apply_1_ != BlockRailBase.EnumRailDirection.SOUTH_WEST;
+            return p_apply_1_ != EnumRailDirection.NORTH_EAST && p_apply_1_ != EnumRailDirection.NORTH_WEST && p_apply_1_ != EnumRailDirection.SOUTH_EAST && p_apply_1_ != EnumRailDirection.SOUTH_WEST;
         }
     });
     public static final PropertyBool POWERED = PropertyBool.create("powered");
@@ -34,7 +37,7 @@
     {
         super(true);
         this.isActivator = isActivator;
-        this.setDefaultState(this.blockState.getBaseState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH).withProperty(POWERED, Boolean.valueOf(false)));
+        this.setDefaultState(this.blockState.getBaseState().withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH).withProperty(POWERED, Boolean.valueOf(false)));
     }
 
     @SuppressWarnings("incomplete-switch")
@@ -50,7 +53,7 @@
             int j = pos.getY();
             int k = pos.getZ();
             boolean flag = true;
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
+            EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection)state.getValue(SHAPE);
 
             switch (blockrailbase$enumraildirection)
             {
@@ -91,7 +94,7 @@
                         flag = false;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.EAST_WEST;
+                    blockrailbase$enumraildirection = EnumRailDirection.EAST_WEST;
                     break;
                 case ASCENDING_WEST:
 
@@ -106,7 +109,7 @@
                         ++i;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.EAST_WEST;
+                    blockrailbase$enumraildirection = EnumRailDirection.EAST_WEST;
                     break;
                 case ASCENDING_NORTH:
 
@@ -121,7 +124,7 @@
                         flag = false;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.NORTH_SOUTH;
+                    blockrailbase$enumraildirection = EnumRailDirection.NORTH_SOUTH;
                     break;
                 case ASCENDING_SOUTH:
 
@@ -136,7 +139,7 @@
                         --k;
                     }
 
-                    blockrailbase$enumraildirection = BlockRailBase.EnumRailDirection.NORTH_SOUTH;
+                    blockrailbase$enumraildirection = EnumRailDirection.NORTH_SOUTH;
             }
 
             if (this.isSameRailWithPower(worldIn, new BlockPos(i, j, k), p_176566_4_, p_176566_5_, blockrailbase$enumraildirection))
@@ -150,7 +153,7 @@
         }
     }
 
-    protected boolean isSameRailWithPower(World worldIn, BlockPos pos, boolean p_176567_3_, int distance, BlockRailBase.EnumRailDirection p_176567_5_)
+    protected boolean isSameRailWithPower(World worldIn, BlockPos pos, boolean p_176567_3_, int distance, EnumRailDirection p_176567_5_)
     {
         IBlockState iblockstate = worldIn.getBlockState(pos);
 
@@ -160,11 +163,11 @@
         }
         else
         {
-            BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)iblockstate.getValue(SHAPE);
+            EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection)iblockstate.getValue(SHAPE);
 
-            if (p_176567_5_ != BlockRailBase.EnumRailDirection.EAST_WEST || blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.NORTH_SOUTH && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_NORTH && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_SOUTH)
+            if (p_176567_5_ != EnumRailDirection.EAST_WEST || blockrailbase$enumraildirection != EnumRailDirection.NORTH_SOUTH && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_NORTH && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_SOUTH)
             {
-                if (p_176567_5_ != BlockRailBase.EnumRailDirection.NORTH_SOUTH || blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.EAST_WEST && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_EAST && blockrailbase$enumraildirection != BlockRailBase.EnumRailDirection.ASCENDING_WEST)
+                if (p_176567_5_ != EnumRailDirection.NORTH_SOUTH || blockrailbase$enumraildirection != EnumRailDirection.EAST_WEST && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_EAST && blockrailbase$enumraildirection != EnumRailDirection.ASCENDING_WEST)
                 {
                     if (((Boolean)iblockstate.getValue(POWERED)).booleanValue())
                     {
@@ -194,30 +197,35 @@
 
         if (flag1 != flag)
         {
+            int power = state.getValue(POWERED) ? 15 : 0;
+            int newPower = CraftEventFactory.callRedstoneChange(worldIn, pos.getX(), pos.getY(), pos.getZ(), power, 15 - power).getNewCurrent();
+            if (newPower == power) {
+                return;
+            }
             worldIn.setBlockState(pos, state.withProperty(POWERED, Boolean.valueOf(flag1)), 3);
             worldIn.notifyNeighborsOfStateChange(pos.down(), this, false);
 
-            if (((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).isAscending())
+            if (((EnumRailDirection)state.getValue(SHAPE)).isAscending())
             {
                 worldIn.notifyNeighborsOfStateChange(pos.up(), this, false);
             }
         }
     }
 
-    public IProperty<BlockRailBase.EnumRailDirection> getShapeProperty()
+    public IProperty<EnumRailDirection> getShapeProperty()
     {
         return SHAPE;
     }
 
     public IBlockState getStateFromMeta(int meta)
     {
-        return this.getDefaultState().withProperty(SHAPE, BlockRailBase.EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
+        return this.getDefaultState().withProperty(SHAPE, EnumRailDirection.byMetadata(meta & 7)).withProperty(POWERED, Boolean.valueOf((meta & 8) > 0));
     }
 
     public int getMetaFromState(IBlockState state)
     {
         int i = 0;
-        i = i | ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE)).getMetadata();
+        i = i | ((EnumRailDirection)state.getValue(SHAPE)).getMetadata();
 
         if (((Boolean)state.getValue(POWERED)).booleanValue())
         {
@@ -234,76 +242,76 @@
         {
             case CLOCKWISE_180:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                 }
 
             case COUNTERCLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                 }
 
             case CLOCKWISE_90:
 
-                switch ((BlockRailBase.EnumRailDirection)state.getValue(SHAPE))
+                switch ((EnumRailDirection)state.getValue(SHAPE))
                 {
                     case NORTH_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.EAST_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.EAST_WEST);
                     case EAST_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                 }
 
             default:
@@ -314,7 +322,7 @@
     @SuppressWarnings("incomplete-switch")
     public IBlockState withMirror(IBlockState state, Mirror mirrorIn)
     {
-        BlockRailBase.EnumRailDirection blockrailbase$enumraildirection = (BlockRailBase.EnumRailDirection)state.getValue(SHAPE);
+        EnumRailDirection blockrailbase$enumraildirection = (EnumRailDirection)state.getValue(SHAPE);
 
         switch (mirrorIn)
         {
@@ -323,17 +331,17 @@
                 switch (blockrailbase$enumraildirection)
                 {
                     case ASCENDING_NORTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_SOUTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_NORTH);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     default:
                         return super.withMirror(state, mirrorIn);
                 }
@@ -343,21 +351,21 @@
                 switch (blockrailbase$enumraildirection)
                 {
                     case ASCENDING_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.ASCENDING_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.SOUTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.SOUTH_EAST);
                     case NORTH_WEST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_EAST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_EAST);
                     case NORTH_EAST:
-                        return state.withProperty(SHAPE, BlockRailBase.EnumRailDirection.NORTH_WEST);
+                        return state.withProperty(SHAPE, EnumRailDirection.NORTH_WEST);
                 }
         }
 
