--- ../src-base/minecraft/net/minecraft/entity/EntityTrackerEntry.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTrackerEntry.java
@@ -64,9 +64,14 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.storage.MapData;
+import net.minecraftforge.fml.common.FMLLog;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
 
+import javax.annotation.Nullable;
+
 public class EntityTrackerEntry
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -98,6 +103,7 @@
 
     public EntityTrackerEntry(Entity entityIn, int rangeIn, int maxRangeIn, int updateFrequencyIn, boolean sendVelocityUpdatesIn)
     {
+        entityIn.trackedEntity = this; // Paper
         this.trackedEntity = entityIn;
         this.range = rangeIn;
         this.maxRange = maxRangeIn;
@@ -148,19 +154,19 @@
         if (!list.equals(this.passengers))
         {
             this.passengers = list;
-            this.sendPacketToTrackedPlayers(new SPacketSetPassengers(this.trackedEntity));
+            this.sendToTrackingAndSelf(new SPacketSetPassengers(this.trackedEntity)); // CraftBukkit
         }
 
-        if (this.trackedEntity instanceof EntityItemFrame && this.updateCounter % 10 == 0)
+        if (this.trackedEntity instanceof EntityItemFrame /*&& this.updateCounter % 10 == 0*/) // CraftBukkit - Moved below, should always enter this block
         {
             EntityItemFrame entityitemframe = (EntityItemFrame)this.trackedEntity;
             ItemStack itemstack = entityitemframe.getDisplayedItem();
 
-            if (itemstack.getItem() instanceof ItemMap)
+            if (this.updateCounter % 10 == 0 && itemstack.getItem() instanceof ItemMap)// CraftBukkit - Moved this.updateCounter % 10 logic here so item frames do not enter the other blocks
             {
                 MapData mapdata = ((ItemMap) itemstack.getItem()).getMapData(itemstack, this.trackedEntity.world);
 
-                for (EntityPlayer entityplayer : players)
+                for (EntityPlayer entityplayer : trackingPlayers)
                 {
                     EntityPlayerMP entityplayermp = (EntityPlayerMP)entityplayer;
                     mapdata.updateVisiblePlayers(entityplayermp, itemstack);
@@ -212,6 +218,21 @@
                 boolean flag = j * j + k * k + l * l >= 128L || this.updateCounter % 60 == 0;
                 boolean flag1 = Math.abs(k2 - this.encodedRotationYaw) >= 1 || Math.abs(i - this.encodedRotationPitch) >= 1;
 
+                // CraftBukkit start - Code moved from below
+                if (flag)
+                {
+                    this.encodedPosX = i1;
+                    this.encodedPosY = i2;
+                    this.encodedPosZ = j2;
+                }
+
+                if (flag1)
+                {
+                    this.encodedRotationYaw = k2;
+                    this.encodedRotationPitch = i;
+                }
+                // CraftBukkit end
+
                 if (this.updateCounter > 0 || this.trackedEntity instanceof EntityArrow)
                 {
                     if (j >= -32768L && j < 32768L && k >= -32768L && k < 32768L && l >= -32768L && l < 32768L && this.ticksSinceLastForcedTeleport <= 400 && !this.ridingEntity && this.onGround == this.trackedEntity.onGround)
@@ -236,6 +257,11 @@
                     {
                         this.onGround = this.trackedEntity.onGround;
                         this.ticksSinceLastForcedTeleport = 0;
+                        // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
+                        if (this.trackedEntity instanceof EntityPlayer) {
+                            this.updatePlayerEntities(new java.util.ArrayList<>(this.trackingPlayers));
+                        }
+                        // CraftBukkit end
                         this.resetPlayerVisibility();
                         packet1 = new SPacketEntityTeleport(this.trackedEntity);
                     }
@@ -272,6 +298,7 @@
 
                 this.sendMetadata();
 
+                /* CraftBukkit start - Code moved up
                 if (flag)
                 {
                     this.encodedPosX = i1;
@@ -284,6 +311,7 @@
                     this.encodedRotationYaw = k2;
                     this.encodedRotationPitch = i;
                 }
+                // CraftBukkit end */
 
                 this.ridingEntity = false;
             }
@@ -303,7 +331,28 @@
 
         if (this.trackedEntity.velocityChanged)
         {
-            this.sendToTrackingAndSelf(new SPacketEntityVelocity(this.trackedEntity));
+            // this.sendToTrackingAndSelf(new SPacketEntityVelocity(this.trackedEntity));
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.trackedEntity instanceof EntityPlayer) {
+                Player player = (Player) this.trackedEntity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+
+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                this.trackedEntity.world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    cancelled = true;
+                } else if (!velocity.equals(event.getVelocity())) {
+                    player.setVelocity(event.getVelocity());
+                }
+            }
+
+            if (!cancelled) {
+                this.sendToTrackingAndSelf(new SPacketEntityVelocity(this.trackedEntity));
+            }
+            // CraftBukkit end
             this.trackedEntity.velocityChanged = false;
         }
     }
@@ -324,6 +373,11 @@
 
             if (!set.isEmpty())
             {
+                // CraftBukkit start - Send scaled max health
+                if (this.trackedEntity instanceof EntityPlayerMP) {
+                    ((EntityPlayerMP) this.trackedEntity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+                // CraftBukkit end
                 this.sendToTrackingAndSelf(new SPacketEntityProperties(this.trackedEntity.getEntityId(), set));
             }
 
@@ -376,6 +430,16 @@
             {
                 if (!this.trackingPlayers.contains(playerMP) && (this.isPlayerWatchingThisChunk(playerMP) || this.trackedEntity.forceSpawn))
                 {
+                    // CraftBukkit start - respect vanish API
+                    if (this.trackedEntity instanceof EntityPlayerMP) {
+                        Player player = ((EntityPlayerMP) this.trackedEntity).getBukkitEntity();
+                        if (!playerMP.getBukkitEntity().canSee(player)) {
+                            return;
+                        }
+                    }
+
+                    playerMP.entityRemoveQueue.remove(Integer.valueOf(this.trackedEntity.getEntityId()));
+                    // CraftBukkit end
                     this.trackingPlayers.add(playerMP);
                     Packet<?> packet = this.createSpawnPacket();
                     playerMP.connection.sendPacket(packet);
@@ -392,6 +456,13 @@
                         AttributeMap attributemap = (AttributeMap)((EntityLivingBase)this.trackedEntity).getAttributeMap();
                         Collection<IAttributeInstance> collection = attributemap.getWatchedAttributes();
 
+                        // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+                        if (this.trackedEntity.getEntityId() == playerMP.getEntityId()) {
+                            // TODO: Maybe we should check for instanceof before casting to EntityPlayerMP?
+                            ((EntityPlayerMP) this.trackedEntity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+                        }
+                        // CraftBukkit end
+
                         if (!collection.isEmpty())
                         {
                             playerMP.connection.sendPacket(new SPacketEntityProperties(this.trackedEntity.getEntityId(), collection));
@@ -435,6 +506,11 @@
                         }
                     }
 
+                    // CraftBukkit start - Fix for nonsensical head yaw
+                    this.lastHeadMotion = MathHelper.floor(this.trackedEntity.getRotationYawHead() * 256.0F / 360.0F);
+                    this.sendPacketToTrackedPlayers(new SPacketEntityHeadLook(this.trackedEntity, (byte) lastHeadMotion));
+                    // CraftBukkit end
+
                     if (this.trackedEntity instanceof EntityLivingBase)
                     {
                         EntityLivingBase entitylivingbase = (EntityLivingBase)this.trackedEntity;
@@ -457,6 +533,7 @@
 
                     this.trackedEntity.addTrackingPlayer(playerMP);
                     playerMP.addEntity(this.trackedEntity);
+                    updatePassengers(playerMP); // Paper
                     net.minecraftforge.event.ForgeEventFactory.onStartEntityTracking(trackedEntity, playerMP);
                 }
             }
@@ -465,6 +542,7 @@
                 this.trackingPlayers.remove(playerMP);
                 this.trackedEntity.removeTrackingPlayer(playerMP);
                 playerMP.removeEntity(this.trackedEntity);
+                updatePassengers(playerMP); // Paper
                 net.minecraftforge.event.ForgeEventFactory.onStopEntityTracking(trackedEntity, playerMP);
             }
         }
@@ -472,6 +550,46 @@
 
     public boolean isVisibleTo(EntityPlayerMP playerMP)
     {
+        // Paper start
+        if (trackedEntity.isRiding()) {
+            return isTrackedBy(trackedEntity.getLowestRidingEntity(), playerMP);
+        } else if (hasPassengerInRange(trackedEntity, playerMP)) {
+            return true;
+        }
+
+        return isInRangeOfPlayer(playerMP);
+    }
+    private static boolean hasPassengerInRange(Entity entity, EntityPlayerMP entityplayer) {
+        if (!entity.isBeingRidden()) {
+            return false;
+        }
+        for (Entity passenger : entity.riddenByEntities) {
+            if (passenger.trackedEntity != null && passenger.trackedEntity.isInRangeOfPlayer(entityplayer)) {
+                return true;
+            }
+            if (passenger.isBeingRidden()) {
+                if (hasPassengerInRange(passenger, entityplayer)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    private static boolean isTrackedBy(Entity entity, EntityPlayerMP entityplayer) {
+        return entity == entityplayer || entity.trackedEntity != null && entity.trackedEntity.trackingPlayers.contains(entityplayer);
+    }
+    private void updatePassengers(EntityPlayerMP player) {
+        if (trackedEntity.isBeingRidden()) {
+            trackedEntity.riddenByEntities.forEach((e) -> {
+                if (e.trackedEntity != null) {
+                    e.trackedEntity.updatePlayerEntity(player);
+                }
+            });
+            player.connection.sendPacket(new SPacketSetPassengers(this.trackedEntity));
+        }
+    }
+    private boolean isInRangeOfPlayer(EntityPlayerMP playerMP) {
+        // Paper end
         double d0 = playerMP.posX - (double)this.encodedPosX / 4096.0D;
         double d1 = playerMP.posZ - (double)this.encodedPosZ / 4096.0D;
         int i = Math.min(this.range, this.maxRange);
@@ -491,11 +609,15 @@
         }
     }
 
+    @Nullable
     private Packet<?> createSpawnPacket()
     {
         if (this.trackedEntity.isDead)
         {
-            LOGGER.warn("Fetching addPacket for removed entity");
+            // CraftBukkit start - Remove useless error spam, just return
+//            LOGGER.warn("Fetching addPacket for removed entity");
+            return null;
+            // CraftBukkit end
         }
 
         Packet pkt = net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.getEntitySpawningPacket(this.trackedEntity);
@@ -656,7 +778,8 @@
         }
         else
         {
-            throw new IllegalArgumentException("Don't know how to add " + this.trackedEntity.getClass() + "!");
+            FMLLog.log.warn(new IllegalArgumentException("Don't know how to add " + this.trackedEntity.getClass() + "!").getMessage() + "x:{}, y:{}x z:{}", this.trackedEntity.posX, this.trackedEntity.posY, this.trackedEntity.posZ);
+            return null;
         }
     }
 
@@ -667,6 +790,7 @@
             this.trackingPlayers.remove(playerMP);
             this.trackedEntity.removeTrackingPlayer(playerMP);
             playerMP.removeEntity(this.trackedEntity);
+            updatePassengers(playerMP); // Paper
         }
     }
 
