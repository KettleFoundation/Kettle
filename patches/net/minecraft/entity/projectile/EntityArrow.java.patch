--- ../src-base/minecraft/net/minecraft/entity/projectile/EntityArrow.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/EntityArrow.java
@@ -12,6 +12,7 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityEnderman;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -36,6 +37,10 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.player.PlayerPickupArrowEvent;
 
 public abstract class EntityArrow extends Entity implements IProjectile
 {
@@ -47,21 +52,33 @@
         }
     });
     private static final DataParameter<Byte> CRITICAL = EntityDataManager.<Byte>createKey(EntityArrow.class, DataSerializers.BYTE);
-    private int xTile;
-    private int yTile;
-    private int zTile;
+    public int xTile;
+    public int yTile;
+    public int zTile;
     private Block inTile;
     private int inData;
-    protected boolean inGround;
+    public boolean inGround; // Spigot
     protected int timeInGround;
-    public EntityArrow.PickupStatus pickupStatus;
+    public PickupStatus pickupStatus;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage;
-    private int knockbackStrength;
+    public int knockbackStrength;
 
+    // Spigot Start
+    @Override
+    public void inactiveTick()
+    {
+        if ( this.inGround )
+        {
+            this.ticksInGround += 1; // Despawn counter. First int after shooter
+        }
+        super.inactiveTick();
+    }
+    // Spigot End
+
     public EntityArrow(World worldIn)
     {
         super(worldIn);
@@ -83,6 +100,7 @@
     {
         this(worldIn, shooter.posX, shooter.posY + (double)shooter.getEyeHeight() - 0.10000000149011612D, shooter.posZ);
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity) shooter.getBukkitEntity();
 
         if (shooter instanceof EntityPlayer)
         {
@@ -222,7 +240,7 @@
             {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround >= 1200)
+                if (this.ticksInGround >= world.spigotConfig.arrowDespawnRate) // Spigot - First int after shooter
                 {
                     this.setDead();
                 }
@@ -339,7 +357,7 @@
     protected void onHit(RayTraceResult raytraceResultIn)
     {
         Entity entity = raytraceResultIn.entityHit;
-
+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, raytraceResultIn);
         if (entity != null)
         {
             float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
@@ -363,7 +381,12 @@
 
             if (this.isBurning() && !(entity instanceof EntityEnderman))
             {
-                entity.setFire(5);
+//                entity.setFire(5);
+                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                if (!combustEvent.isCancelled()) {
+                    entity.setFire(combustEvent.getDuration());
+                }
             }
 
             if (entity.attackEntityFrom(damagesource, (float)i))
@@ -570,9 +593,20 @@
     {
         if (!this.world.isRemote && this.inGround && this.arrowShake <= 0)
         {
-            boolean flag = this.pickupStatus == EntityArrow.PickupStatus.ALLOWED || this.pickupStatus == EntityArrow.PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+            ItemStack itemstack = this.getArrowStack();
+            EntityItem item = new EntityItem(this.world, this.posX, this.posY, this.posZ, itemstack);
+            if (this.pickupStatus == PickupStatus.ALLOWED && entityIn.inventory.canHold(itemstack) > 0) {
+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.world.getServer(), this, item), (org.bukkit.entity.Arrow) this.getBukkitEntity());
+                // event.setCancelled(!entityhuman.thisisatest); TODO
+                this.world.getServer().getPluginManager().callEvent(event);
 
-            if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(this.getArrowStack()))
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            boolean flag = this.pickupStatus == PickupStatus.ALLOWED || this.pickupStatus == PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+
+            if (this.pickupStatus == PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(item.getItem()))
             {
                 flag = false;
             }
@@ -655,7 +689,13 @@
 
         if (EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.FLAME, p_190547_1_) > 0)
         {
-            this.setFire(100);
+//            this.setFire(100);
+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 100);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                this.setFire(event.getDuration());
+            }
         }
     }
 
