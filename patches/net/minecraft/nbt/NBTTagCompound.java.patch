--- ../src-base/minecraft/net/minecraft/nbt/NBTTagCompound.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagCompound.java
@@ -5,13 +5,7 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import net.minecraft.crash.CrashReport;
@@ -25,14 +19,12 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
-    private final Map<String, NBTBase> tagMap = Maps.<String, NBTBase>newHashMap();
+    private Map<String, NBTBase> tagMap = Maps.newHashMap(); // Paper
 
-    void write(DataOutput output) throws IOException
+    public void write(DataOutput output) throws IOException
     {
-        for (String s : this.tagMap.keySet())
-        {
-            NBTBase nbtbase = this.tagMap.get(s);
-            writeEntry(s, nbtbase, output);
+        for (Map.Entry<String, NBTBase> entry : this.tagMap.entrySet()) {
+            writeEntry(entry.getKey(), entry.getValue(), output);
         }
 
         output.writeByte(0);
@@ -70,6 +62,16 @@
         return this.tagMap.keySet();
     }
 
+    public Collection<NBTBase> values()
+    {
+        return this.tagMap.values();
+    }
+
+    public Set<Map.Entry<String, NBTBase>> entrySet()
+    {
+        return this.tagMap.entrySet();
+    }
+
     public byte getId()
     {
         return 10;
@@ -82,7 +84,6 @@
 
     public void setTag(String key, NBTBase value)
     {
-        if (value == null) throw new IllegalArgumentException("Invalid null NBT value with key " + key);
         this.tagMap.put(key, value);
     }
 
@@ -183,188 +184,77 @@
         }
         else
         {
-            return i == 1 || i == 2 || i == 3 || i == 4 || i == 5 || i == 6;
+            return i >= 1 && i <= 6;
         }
     }
 
     public byte getByte(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getByte();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getByte() : 0;
     }
 
     public short getShort(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getShort();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getShort() : 0;
     }
 
     public int getInteger(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getInt();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getInt() : 0;
     }
 
     public long getLong(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getLong();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0L;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getLong() : 0;
     }
 
     public float getFloat(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getFloat();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0.0F;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getFloat() : 0;
     }
 
     public double getDouble(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 99))
-            {
-                return ((NBTPrimitive)this.tagMap.get(key)).getDouble();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return 0.0D;
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTPrimitive ? ((NBTPrimitive)tag).getDouble() : 0;
     }
 
     public String getString(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 8))
-            {
-                return ((NBTBase)this.tagMap.get(key)).getString();
-            }
-        }
-        catch (ClassCastException var3)
-        {
-            ;
-        }
-
-        return "";
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTTagString ? (tag).getString() : "";
     }
 
     public byte[] getByteArray(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 7))
-            {
-                return ((NBTTagByteArray)this.tagMap.get(key)).getByteArray();
-            }
-        }
-        catch (ClassCastException classcastexception)
-        {
-            throw new ReportedException(this.createCrashReport(key, 7, classcastexception));
-        }
-
-        return new byte[0];
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTTagByteArray ? ((NBTTagByteArray)tag).getByteArray() : new byte[0];
     }
 
     public int[] getIntArray(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 11))
-            {
-                return ((NBTTagIntArray)this.tagMap.get(key)).getIntArray();
-            }
-        }
-        catch (ClassCastException classcastexception)
-        {
-            throw new ReportedException(this.createCrashReport(key, 11, classcastexception));
-        }
-
-        return new int[0];
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTTagIntArray ? ((NBTTagIntArray)tag).getIntArray() : new int[0];
     }
 
     public NBTTagCompound getCompoundTag(String key)
     {
-        try
-        {
-            if (this.hasKey(key, 10))
-            {
-                return (NBTTagCompound)this.tagMap.get(key);
-            }
-        }
-        catch (ClassCastException classcastexception)
-        {
-            throw new ReportedException(this.createCrashReport(key, 10, classcastexception));
-        }
-
-        return new NBTTagCompound();
+        NBTBase tag = this.tagMap.get(key);
+        return tag instanceof NBTTagCompound ? ((NBTTagCompound)tag) : new NBTTagCompound();
     }
 
     public NBTTagList getTagList(String key, int type)
     {
-        try
-        {
-            if (this.getTagId(key) == 9)
-            {
-                NBTTagList nbttaglist = (NBTTagList)this.tagMap.get(key);
-
+        NBTBase tag = this.tagMap.get(key);
+        if (tag == null) {
+            return new NBTTagList();
+        }
+        NBTTagList nbttaglist = (NBTTagList) tag;
                 if (!nbttaglist.hasNoTags() && nbttaglist.getTagType() != type)
                 {
                     return new NBTTagList();
@@ -372,15 +262,7 @@
 
                 return nbttaglist;
             }
-        }
-        catch (ClassCastException classcastexception)
-        {
-            throw new ReportedException(this.createCrashReport(key, 9, classcastexception));
-        }
 
-        return new NBTTagList();
-    }
-
     public boolean getBoolean(String key)
     {
         return this.getByte(key) != 0;
@@ -394,23 +276,13 @@
     public String toString()
     {
         StringBuilder stringbuilder = new StringBuilder("{");
-        Collection<String> collection = this.tagMap.keySet();
 
-        if (LOGGER.isDebugEnabled())
-        {
-            List<String> list = Lists.newArrayList(this.tagMap.keySet());
-            Collections.sort(list);
-            collection = list;
-        }
-
-        for (String s : collection)
-        {
-            if (stringbuilder.length() != 1)
-            {
-                stringbuilder.append(',');
+        for (Map.Entry<String, NBTBase> entry : this.tagMap.entrySet()) {
+            stringbuilder.append(handleEscape(entry.getKey())).append(':').append(entry.getValue()).append(',');
             }
 
-            stringbuilder.append(handleEscape(s)).append(':').append(this.tagMap.get(s));
+        if (stringbuilder.charAt(stringbuilder.length() - 1) == ',') {
+            stringbuilder.deleteCharAt(stringbuilder.length() - 1);
         }
 
         return stringbuilder.append('}').toString();
@@ -446,10 +318,10 @@
     public NBTTagCompound copy()
     {
         NBTTagCompound nbttagcompound = new NBTTagCompound();
-
-        for (String s : this.tagMap.keySet())
+        nbttagcompound.tagMap = new HashMap<String, NBTBase>((int)(this.tagMap.size()*1.35)+1); //compaction factor
+        for (Map.Entry<String, NBTBase> s : this.tagMap.entrySet())
         {
-            nbttagcompound.setTag(s, ((NBTBase)this.tagMap.get(s)).copy());
+            nbttagcompound.setTag(s.getKey(), s.getValue().copy());
         }
 
         return nbttagcompound;
@@ -509,26 +381,30 @@
 
     public void merge(NBTTagCompound other)
     {
-        for (String s : other.tagMap.keySet())
-        {
-            NBTBase nbtbase = other.tagMap.get(s);
-
-            if (nbtbase.getId() == 10)
-            {
-                if (this.hasKey(s, 10))
-                {
-                    NBTTagCompound nbttagcompound = this.getCompoundTag(s);
-                    nbttagcompound.merge((NBTTagCompound)nbtbase);
+        for (Map.Entry<String, NBTBase> otherEntry : other.tagMap.entrySet()) {
+            String k = otherEntry.getKey();
+            NBTBase v = otherEntry.getValue();
+            if (v.getId() == 10) {
+//                NBTTagCompound
+                NBTBase tv = this.tagMap.get(k);
+                if (tv != null && tv.getId() == 10) {
+                    NBTTagCompound nbttagcompound = (NBTTagCompound) tv;
+                    nbttagcompound.merge((NBTTagCompound) v);
+                } else {
+                    this.setTag(k, v.copy());
                 }
-                else
-                {
-                    this.setTag(s, nbtbase.copy());
+            } else {
+                this.setTag(k, v.copy());
+            }
                 }
             }
-            else
-            {
-                this.setTag(s, nbtbase.copy());
-            }
+
+    public <T> T getTagIfPresent(String key, Class<T> type) {
+        NBTBase tag = this.tagMap.get(key);
+        if (tag != null && tag.getClass() == type) {
+            return (T) tag;
+        } else {
+            return null;
         }
     }
 
