--- ../src-base/minecraft/net/minecraft/advancements/FunctionManager.java
+++ ../src-work/minecraft/net/minecraft/advancements/FunctionManager.java
@@ -27,15 +27,18 @@
     private final Map<ResourceLocation, FunctionObject> functions = Maps.<ResourceLocation, FunctionObject>newHashMap();
     private String currentGameLoopFunctionId = "-";
     private FunctionObject gameLoopFunction;
-    private final ArrayDeque<FunctionManager.QueuedCommand> commandQueue = new ArrayDeque<FunctionManager.QueuedCommand>();
+    private final ArrayDeque<QueuedCommand> commandQueue = new ArrayDeque<QueuedCommand>();
     private boolean isExecuting = false;
-    private final ICommandSender gameLoopFunctionSender = new ICommandSender()
-    {
+    private final ICommandSender gameLoopFunctionSender = new CustomFunctionListener();
+
+    public class CustomFunctionListener implements ICommandSender {
+
+        public org.bukkit.command.CommandSender sender = new org.bukkit.craftbukkit.command.CraftFunctionCommandSender(this);
         public String getName()
         {
             return FunctionManager.this.currentGameLoopFunctionId;
         }
-        public boolean canUseCommand(int permLevel, String commandName)
+        public boolean canUseCommand(int permLevel, String commandName, String perm)
         {
             return permLevel <= 2;
         }
@@ -101,7 +104,7 @@
         {
             if (this.commandQueue.size() < i)
             {
-                this.commandQueue.addFirst(new FunctionManager.QueuedCommand(this, sender, new FunctionObject.FunctionEntry(function)));
+                this.commandQueue.addFirst(new QueuedCommand(this, sender, new FunctionObject.FunctionEntry(function)));
             }
 
             return 0;
@@ -118,7 +121,7 @@
 
                 for (int k = afunctionobject$entry.length - 1; k >= 0; --k)
                 {
-                    this.commandQueue.push(new FunctionManager.QueuedCommand(this, sender, afunctionobject$entry[k]));
+                    this.commandQueue.push(new QueuedCommand(this, sender, afunctionobject$entry[k]));
                 }
 
                 while (true)
@@ -192,26 +195,26 @@
     }
 
     public static class QueuedCommand
+    {
+        private final FunctionManager functionManager;
+        private final ICommandSender sender;
+        private final FunctionObject.Entry entry;
+
+        public QueuedCommand(FunctionManager functionManagerIn, ICommandSender senderIn, FunctionObject.Entry entryIn)
         {
-            private final FunctionManager functionManager;
-            private final ICommandSender sender;
-            private final FunctionObject.Entry entry;
+            this.functionManager = functionManagerIn;
+            this.sender = senderIn;
+            this.entry = entryIn;
+        }
 
-            public QueuedCommand(FunctionManager functionManagerIn, ICommandSender senderIn, FunctionObject.Entry entryIn)
-            {
-                this.functionManager = functionManagerIn;
-                this.sender = senderIn;
-                this.entry = entryIn;
-            }
+        public void execute(ArrayDeque<QueuedCommand> commandQueue, int maxCommandChainLength)
+        {
+            this.entry.execute(this.functionManager, this.sender, commandQueue, maxCommandChainLength);
+        }
 
-            public void execute(ArrayDeque<FunctionManager.QueuedCommand> commandQueue, int maxCommandChainLength)
-            {
-                this.entry.execute(this.functionManager, this.sender, commandQueue, maxCommandChainLength);
-            }
-
-            public String toString()
-            {
-                return this.entry.toString();
-            }
+        public String toString()
+        {
+            return this.entry.toString();
         }
+    }
 }
