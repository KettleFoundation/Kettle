--- ../src-base/minecraft/net/minecraft/world/WorldServer.java
+++ ../src-work/minecraft/net/minecraft/world/WorldServer.java
@@ -14,27 +14,22 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
-import java.util.function.Predicate;
+import java.util.logging.Level;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockEventData;
+import net.minecraft.block.*;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EntityTracker;
 import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.entity.INpc;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.passive.EntityAnimal;
 import net.minecraft.entity.passive.EntitySkeletonHorse;
-import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -50,6 +45,7 @@
 import net.minecraft.scoreboard.ServerScoreboard;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerChunkMap;
+import net.minecraft.tileentity.*;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.util.IThreadListener;
@@ -77,50 +73,94 @@
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.WorldSavedDataCallableSave;
 import net.minecraft.world.storage.loot.LootTableManager;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
 
 public class WorldServer extends World implements IThreadListener
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final MinecraftServer mcServer;
-    private final EntityTracker entityTracker;
+    public EntityTracker entityTracker;
     private final PlayerChunkMap playerChunkMap;
-    private final Set<NextTickListEntry> pendingTickListEntriesHashSet = Sets.<NextTickListEntry>newHashSet();
-    private final TreeSet<NextTickListEntry> pendingTickListEntriesTreeSet = new TreeSet<NextTickListEntry>();
-    private final Map<UUID, Entity> entitiesByUuid = Maps.<UUID, Entity>newHashMap();
+    private final Set<NextTickListEntry> pendingTickListEntriesHashSet = Sets.newHashSet();
+    private final TreeSet<NextTickListEntry> pendingTickListEntriesTreeSet = new TreeSet<>();
+    private final Map<UUID, Entity> entitiesByUuid = Maps.newHashMap();
     public boolean disableLevelSaving;
     private boolean allPlayersSleeping;
     private int updateEntityTick;
     private final Teleporter worldTeleporter;
     private final WorldEntitySpawner entitySpawner = new WorldEntitySpawner();
     protected final VillageSiege villageSiege = new VillageSiege(this);
-    private final WorldServer.ServerBlockEventList[] blockEventQueue = new WorldServer.ServerBlockEventList[] {new WorldServer.ServerBlockEventList(), new WorldServer.ServerBlockEventList()};
+    private final ServerBlockEventList[] blockEventQueue = new ServerBlockEventList[] {new ServerBlockEventList(), new ServerBlockEventList()};
     private int blockEventCacheIndex;
-    private final List<NextTickListEntry> pendingTickListEntriesThisTick = Lists.<NextTickListEntry>newArrayList();
+    private final List<NextTickListEntry> pendingTickListEntriesThisTick = Lists.newArrayList();
 
     /** Stores the recently processed (lighting) chunks */
-    protected Set<ChunkPos> doneChunks = new java.util.HashSet<ChunkPos>();
-    public List<Teleporter> customTeleporters = new ArrayList<Teleporter>();
+    protected Set<ChunkPos> doneChunks = new java.util.HashSet<>();
+    public List<Teleporter> customTeleporters = new ArrayList<>();
 
+    public final int dimension;
+
+    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(saveHandlerIn, info, net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), methodprofiler, false, gen, env);
+        this.pvpMode = server.isPVPEnabled();
+        info.world = this;
+        this.dimension = dimensionId;
+        this.mcServer = server;
+        this.entityTracker = new EntityTracker(this);
+        this.playerChunkMap = new PlayerChunkMap(this);
+        // Guarantee the dimension ID was not reset by the provider
+        int providerDim = this.provider.getDimension();
+        this.provider.setWorld(this);
+        this.provider.setDimension(providerDim);
+        this.chunkProvider = this.createChunkProvider();
+        this.worldTeleporter = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
+        this.calculateInitialSkylight();
+        this.calculateInitialWeather();
+        this.getWorldBorder().setSize(server.getMaxWorldSize());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.mapStorage = overworld.mapStorage;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.saveHandler));
+        }
+        else {
+            this.mapStorage = new MapStorage(saveHandlerIn);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.saveHandler));
+        }
+        net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, mcServer);
+    }
+
     public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler profilerIn)
     {
         super(saveHandlerIn, info, net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), profilerIn, false);
         this.mcServer = server;
         this.entityTracker = new EntityTracker(this);
         this.playerChunkMap = new PlayerChunkMap(this);
+        this.dimension = dimensionId;
         // Guarantee the dimension ID was not reset by the provider
         int providerDim = this.provider.getDimension();
         this.provider.setWorld(this);
         this.provider.setDimension(providerDim);
         this.chunkProvider = this.createChunkProvider();
-        perWorldStorage = new MapStorage(new net.minecraftforge.common.WorldSpecificSaveHandler((WorldServer)this, saveHandlerIn));
         this.worldTeleporter = new Teleporter(this);
         this.calculateInitialSkylight();
         this.calculateInitialWeather();
         this.getWorldBorder().setSize(server.getMaxWorldSize());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.mapStorage = overworld.mapStorage;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.saveHandler));
+        }
+        else {
+            this.mapStorage = new MapStorage(saveHandlerIn);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.saveHandler));
+        }
         net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, mcServer);
     }
 
@@ -140,7 +180,7 @@
             this.villageCollection = villagecollection;
             this.villageCollection.setWorldsForAll(this);
         }
-
+        if (getServer().getScoreboardManager() == null) { // CraftBukkit
         this.worldScoreboard = new ServerScoreboard(this.mcServer);
         ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData)this.mapStorage.getOrLoadData(ScoreboardSaveData.class, "scoreboard");
 
@@ -152,8 +192,18 @@
 
         scoreboardsavedata.setScoreboard(this.worldScoreboard);
         ((ServerScoreboard)this.worldScoreboard).addDirtyRunnable(new WorldSavedDataCallableSave(scoreboardsavedata));
+        } else {
+            this.worldScoreboard = getServer().getScoreboardManager().getMainScoreboard().getHandle();
+        }
         this.lootTable = new LootTableManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "loot_tables"));
-        this.advancementManager = new AdvancementManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "advancements"));
+        // CraftBukkit start
+        if (this.dimension != 0) { // SPIGOT-3899 multiple worlds of advancements not supported
+            this.advancementManager = this.mcServer.getAdvancementManager();
+        }
+        if (this.advancementManager == null) {
+            this.advancementManager = new AdvancementManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "advancements"));
+        }
+        // CraftBukkit end
         this.functionManager = new FunctionManager(new File(new File(this.saveHandler.getWorldDirectory(), "data"), "functions"), this.mcServer);
         this.getWorldBorder().setCenter(this.worldInfo.getBorderCenterX(), this.worldInfo.getBorderCenterZ());
         this.getWorldBorder().setDamageAmount(this.worldInfo.getBorderDamagePerBlock());
@@ -171,9 +221,145 @@
         }
 
         this.initCapabilities();
+
         return this;
     }
 
+    @Override
+    public TileEntity getTileEntity(BlockPos pos) {
+        TileEntity result = super.getTileEntity(pos);
+        Block type = getBlockState(pos).getBlock();
+
+        if (type == Blocks.CHEST || type == Blocks.TRAPPED_CHEST) {
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FURNACE) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DROPPER) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DISPENSER) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.JUKEBOX) {
+            if (!(result instanceof BlockJukebox.TileEntityJukebox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.NOTEBLOCK) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.MOB_SPAWNER) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.STANDING_SIGN) || (type == Blocks.WALL_SIGN)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENDER_CHEST) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BREWING_STAND) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BEACON) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.HOPPER) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENCHANTING_TABLE) {
+            if (!(result instanceof TileEntityEnchantmentTable)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_PORTAL) {
+            if (!(result instanceof TileEntityEndPortal)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.SKULL) {
+            if (!(result instanceof TileEntitySkull)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DAYLIGHT_DETECTOR || type == Blocks.DAYLIGHT_DETECTOR_INVERTED) {
+            if (!(result instanceof TileEntityDaylightDetector)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.POWERED_COMPARATOR || type == Blocks.UNPOWERED_COMPARATOR) {
+            if (!(result instanceof TileEntityComparator)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FLOWER_POT) {
+            if (!(result instanceof TileEntityFlowerPot)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STANDING_BANNER || type == Blocks.WALL_BANNER) {
+            if (!(result instanceof TileEntityBanner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STRUCTURE_BLOCK) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.END_GATEWAY) {
+            if (!(result instanceof TileEntityEndGateway)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.COMMAND_BLOCK) {
+            if (!(result instanceof TileEntityCommandBlock)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.STRUCTURE_BLOCK) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BED) {
+            if (!(result instanceof TileEntityBed)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper Start - add TE fix checks for shulkers, see nms.BlockShulkerBox
+        else if (type instanceof BlockShulkerBox) {
+            if (!(result instanceof TileEntityShulkerBox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper end
+
+        return result;
+    }
+
+    private TileEntity fixTileEntity(BlockPos pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". "
+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), org.bukkit.Material.getMaterial(Block.getIdFromBlock(type)).toString(), found});
+        if (type instanceof ITileEntityProvider) {
+            TileEntity replacement = ((ITileEntityProvider) type).createNewTileEntity(this, type.getMetaFromState(this.getBlockState(pos)));
+            replacement.world = this;
+            this.setTileEntity(pos, replacement);
+            return replacement;
+        } else {
+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
+            return found;
+        }
+    }
+
+    private boolean canSpawn(int x, int z) {
+        if (this.generator != null) {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        } else {
+            return this.provider.canCoordinateBeSpawn(x, z);
+        }
+    }
+
     public void tick()
     {
         super.tick();
@@ -198,9 +384,12 @@
 
         this.profiler.startSection("mobSpawner");
 
-        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_ALL_BLOCK_STATES)
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.worldInfo.getWorldTotalTime();
+        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getTerrainType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.spawnHostileMobs || this.spawnPeacefulMobs) && this.playerEntities.size() > 0)
         {
-            this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.spawnPeacefulMobs && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldInfo.getWorldTotalTime() % 400L == 0L);
+            // CraftBukkit end
         }
 
         this.profiler.endStartSection("chunkSource");
@@ -212,7 +401,7 @@
             this.setSkylightSubtracted(j);
         }
 
-        this.worldInfo.setWorldTotalTime(this.worldInfo.getWorldTotalTime() + 1L);
+        this.worldInfo.tick();
 
         if (this.getGameRules().getBoolean("doDaylightCycle"))
         {
@@ -236,6 +425,7 @@
         }
         this.profiler.endSection();
         this.sendQueuedBlockEvents();
+        this.getWorld().processChunkGC();
     }
 
     @Nullable
@@ -268,7 +458,7 @@
                 {
                     ++i;
                 }
-                else if (entityplayer.isPlayerSleeping())
+                else if (entityplayer.isPlayerSleeping() || entityplayer.fauxSleeping)
                 {
                     ++j;
                 }
@@ -298,19 +488,26 @@
         this.provider.resetRainAndThunder();
     }
 
+    // TODO: Test this method
     public boolean areAllPlayersAsleep()
     {
         if (this.allPlayersSleeping && !this.isRemote)
         {
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
+
             for (EntityPlayer entityplayer : this.playerEntities)
             {
-                if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep())
+                if (entityplayer.isPlayerFullyAsleep()) {
+                    foundActualSleepers = true;
+                }
+                if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep() || entityplayer.fauxSleeping)
                 {
                     return false;
                 }
             }
 
-            return true;
+            return foundActualSleepers;
         }
         else
         {
@@ -346,7 +543,7 @@
         this.worldInfo.setSpawnZ(j);
     }
 
-    protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
+    public boolean isChunkLoaded(int x, int z, boolean allowEmpty)
     {
         return this.getChunkProvider().chunkExists(x, z);
     }
@@ -355,7 +552,7 @@
     {
         this.profiler.startSection("playerCheckLight");
 
-        if (!this.playerEntities.isEmpty())
+        if (spigotConfig.randomLightUpdates && !this.playerEntities.isEmpty()) // Spigot
         {
             int i = this.rand.nextInt(this.playerEntities.size());
             EntityPlayer entityplayer = this.playerEntities.get(i);
@@ -392,12 +589,14 @@
             {
                 this.profiler.startSection("getChunk");
                 Chunk chunk = iterator.next();
+                try {
                 int j = chunk.x * 16;
                 int k = chunk.z * 16;
                 this.profiler.endStartSection("checkNextLight");
                 chunk.enqueueRelightChecks();
                 this.profiler.endStartSection("tickChunk");
                 chunk.onTick(false);
+//                    if (!chunk.areNeighborsLoaded(1)) continue; // Spigot
                 this.profiler.endStartSection("thunder");
 
                 if (this.provider.canDoLightning(chunk) && flag && flag1 && this.rand.nextInt(100000) == 0)
@@ -416,7 +615,7 @@
                             entityskeletonhorse.setTrap(true);
                             entityskeletonhorse.setGrowingAge(0);
                             entityskeletonhorse.setPosition((double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ());
-                            this.spawnEntity(entityskeletonhorse);
+                            this.spawnEntity(entityskeletonhorse, CreatureSpawnEvent.SpawnReason.LIGHTNING);
                             this.addWeatherEffect(new EntityLightningBolt(this, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), true));
                         }
                         else
@@ -438,12 +637,14 @@
                     if (this.isAreaLoaded(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
                     if (this.canBlockFreezeNoWater(blockpos2))
                     {
-                        this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
+                        // this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockpos2, Blocks.ICE.getDefaultState(), null);
                     }
 
                     if (flag && this.canSnowAt(blockpos1, true))
                     {
-                        this.setBlockState(blockpos1, Blocks.SNOW_LAYER.getDefaultState());
+                        // this.setBlockState(blockpos1, Blocks.SNOW_LAYER.getDefaultState());
+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockpos1, Blocks.SNOW_LAYER.getDefaultState(), null);
                     }
 
                     if (flag && this.getBiome(blockpos2).canRain())
@@ -481,8 +682,15 @@
                         }
                     }
                 }
+                } catch (Exception e) {
+                    try {
+                        this.getChunkProvider().unloadChunk(chunk, true);
+                    } catch (Exception e2) {
+                        e.printStackTrace();
+                    }
+                    e.printStackTrace();
             }
-
+            }
             this.profiler.endSection();
         }
     }
@@ -611,6 +819,7 @@
 
         this.provider.onWorldUpdateEntities();
         super.updateEntities();
+        spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
     protected void tickPlayers()
@@ -686,15 +895,20 @@
         {
             int i = this.pendingTickListEntriesTreeSet.size();
 
-            if (i != this.pendingTickListEntriesHashSet.size())
-            {
-                throw new IllegalStateException("TickNextTick list out of synch");
+            if (i != this.pendingTickListEntriesHashSet.size()) {
+                this.pendingTickListEntriesHashSet.clear();
+                this.pendingTickListEntriesHashSet.addAll(this.pendingTickListEntriesTreeSet);
             }
-            else
-            {
                 if (i > 65536)
                 {
-                    i = 65536;
+                    // i = 65536;
+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                    if (i > 20 * 65536) {
+                        i = i / 20;
+                    } else {
+                        i = 65536;
+                    }
+                    // CraftBukkit end
                 }
 
                 this.profiler.startSection("cleaning");
@@ -756,7 +970,6 @@
                 return !this.pendingTickListEntriesTreeSet.isEmpty();
             }
         }
-    }
 
     @Nullable
     public List<NextTickListEntry> getPendingBlockUpdates(Chunk chunkIn, boolean remove)
@@ -796,7 +1009,8 @@
                 {
                     if (remove)
                     {
-                        if (i == 0)
+                        this.pendingTickListEntriesHashSet.remove(nextticklistentry);
+                        if (i != 0)
                         {
                             this.pendingTickListEntriesHashSet.remove(nextticklistentry);
                         }
@@ -806,7 +1020,7 @@
 
                     if (list == null)
                     {
-                        list = Lists.<NextTickListEntry>newArrayList();
+                        list = new ArrayList<NextTickListEntry>(30);
                     }
 
                     list.add(nextticklistentry);
@@ -817,21 +1031,6 @@
         return list;
     }
 
-    public void updateEntityWithOptionalForce(Entity entityIn, boolean forceUpdate)
-    {
-        if (!this.canSpawnAnimals() && (entityIn instanceof EntityAnimal || entityIn instanceof EntityWaterMob))
-        {
-            entityIn.setDead();
-        }
-
-        if (!this.canSpawnNPCs() && entityIn instanceof INpc)
-        {
-            entityIn.setDead();
-        }
-
-        super.updateEntityWithOptionalForce(entityIn, forceUpdate);
-    }
-
     private boolean canSpawnNPCs()
     {
         return this.mcServer.getCanSpawnNPCs();
@@ -845,9 +1044,62 @@
     protected IChunkProvider createChunkProvider()
     {
         IChunkLoader ichunkloader = this.saveHandler.getChunkLoader(this.provider);
-        return new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        // Kettle - if provider is vanilla, proceed to create a bukkit compatible chunk generator
+        if (this.provider.getClass().toString().length() <= 3 || this.provider.getClass().toString().contains("net.minecraft")) {
+            // CraftBukkit start
+            org.bukkit.craftbukkit.generator.InternalChunkGenerator gen;
+
+            if (this.generator != null) {
+                gen = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, this.getSeed(), this.generator);
+            } else if (this.provider instanceof WorldProviderHell) {
+                gen = new org.bukkit.craftbukkit.generator.NetherChunkGenerator(this, this.getSeed());
+            } else if (this.provider instanceof WorldProviderEnd) {
+                gen = new org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator(this, this.getSeed());
+            } else {
+                gen = new org.bukkit.craftbukkit.generator.NormalChunkGenerator(this, this.getSeed());
+            }
+
+            this.chunkProvider = new ChunkProviderServer(this, ichunkloader, gen);
+            // CraftBukkit end
+        } else { // custom provider, load normally for forge compatibility
+            this.chunkProvider = new ChunkProviderServer(this, ichunkloader, this.provider.createChunkGenerator());
+        }
+        return chunkProvider;
     }
 
+    public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
+            for (int chunkZ = (k >> 4); chunkZ <= ((j1 - 1) >> 4); chunkZ++) {
+                Chunk chunk = getChunkFromChunkCoords(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+                for (Object te : chunk.getTileEntityMap().values()) {
+                    TileEntity tileentity = (TileEntity) te;
+                    if ((tileentity.getPos().getX() >= i) && (tileentity.getPos().getY() >= j) && (tileentity.getPos().getZ() >= k) && (tileentity.getPos().getX() < l) && (tileentity.getPos().getY() < i1) && (tileentity.getPos().getZ() < j1)) {
+                        arraylist.add(tileentity);
+                    }
+                }
+            }
+        }
+        /*
+        for (int k1 = 0; k1 < this.tileEntityList.size(); ++k1) {
+            TileEntity tileentity = (TileEntity) this.tileEntityList.get(k1);
+            BlockPosition blockposition = tileentity.getPosition();
+
+            if (blockposition.getX() >= i && blockposition.getY() >= j && blockposition.getZ() >= k && blockposition.getX() < l && blockposition.getY() < i1 && blockposition.getZ() < j1) {
+                arraylist.add(tileentity);
+            }
+        }
+        */
+        // CraftBukkit end
+
+        return arraylist;
+    }
+
     public boolean isBlockModifiable(EntityPlayer player, BlockPos pos)
     {
         return super.isBlockModifiable(player, pos);
@@ -929,6 +1181,23 @@
             int j = this.provider.getAverageGroundLevel();
             int k = 8;
 
+            // CraftBukkit start
+            if (this.generator != null) {
+                Random rand = new Random(this.getSeed());
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldInfo.getWorldName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        this.worldInfo.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
+                        this.findingSpawnPoint = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
+
             if (blockpos != null)
             {
                 i = blockpos.getX();
@@ -941,7 +1210,7 @@
 
             int l = 0;
 
-            while (!this.provider.canCoordinateBeSpawn(i, k))
+            while (!this.canSpawn(i, k)) // CraftBukkit - use our own canSpawn
             {
                 i += random.nextInt(64) - random.nextInt(64);
                 k += random.nextInt(64) - random.nextInt(64);
@@ -992,6 +1261,7 @@
 
         if (chunkproviderserver.canSave())
         {
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
             if (progressCallback != null)
             {
                 progressCallback.displaySavingString("Saving level");
@@ -1006,14 +1276,6 @@
 
             chunkproviderserver.saveChunks(all);
             net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
-
-            for (Chunk chunk : Lists.newArrayList(chunkproviderserver.getLoadedChunks()))
-            {
-                if (chunk != null && !this.playerChunkMap.contains(chunk.x, chunk.z))
-                {
-                    chunkproviderserver.queueUnload(chunk);
-                }
-            }
         }
     }
 
@@ -1039,6 +1301,12 @@
             }
         }
 
+        // CraftBukkit start - Save secondary data for nether/end
+        if (this instanceof WorldServerMulti) {
+            ((WorldServerMulti) this).saveAdditionalData();
+        }
+        // CraftBukkit end
+
         this.worldInfo.setBorderSize(this.getWorldBorder().getDiameter());
         this.worldInfo.getBorderCenterX(this.getWorldBorder().getCenterX());
         this.worldInfo.getBorderCenterZ(this.getWorldBorder().getCenterZ());
@@ -1058,6 +1326,12 @@
         return this.canAddEntity(entityIn) ? super.spawnEntity(entityIn) : false;
     }
 
+    public boolean spawnEntity(Entity entityIn, CreatureSpawnEvent.SpawnReason spawnReason) {
+        // World.spawnEntity(Entity) will call this, and we still want to perform
+        // existing entity checking when it's called with a SpawnReason
+        return this.canAddEntity(entityIn) ? super.spawnEntity(entityIn, spawnReason) : false;
+    }
+
     public void loadEntities(Collection<Entity> entityCollection)
     {
         for (Entity entity : Lists.newArrayList(entityCollection))
@@ -1074,7 +1348,6 @@
     {
         if (entityIn.isDead)
         {
-            LOGGER.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityList.getKey(entityIn));
             return false;
         }
         else
@@ -1085,7 +1358,7 @@
             {
                 Entity entity = this.entitiesByUuid.get(uuid);
 
-                if (this.unloadedEntityList.contains(entity))
+                if (this.unloadedEntityList.contains(entity) || entity.isDead) // Paper - if dupe is dead, overwrite
                 {
                     this.unloadedEntityList.remove(entity);
                 }
@@ -1093,7 +1366,6 @@
                 {
                     if (!(entityIn instanceof EntityPlayer))
                     {
-                        LOGGER.warn("Keeping entity {} that already exists with UUID {}", EntityList.getKey(entity), uuid.toString());
                         return false;
                     }
 
@@ -1141,9 +1413,15 @@
 
     public boolean addWeatherEffect(Entity entityIn)
     {
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entityIn.getBukkitEntity());
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
+        }
         if (super.addWeatherEffect(entityIn))
         {
-            this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, this.provider.getDimension(), new SPacketSpawnGlobalEntity(entityIn));
+            this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, entityIn.posX, entityIn.posY, entityIn.posZ, 512.0D, this, new SPacketSpawnGlobalEntity(entityIn)); // CraftBukkit - Use dimension  // Paper - use world instead of dimension
             return true;
         }
         else
@@ -1164,11 +1442,12 @@
 
     public Explosion newExplosion(@Nullable Entity entityIn, double x, double y, double z, float strength, boolean isFlaming, boolean isSmoking)
     {
-        Explosion explosion = new Explosion(this, entityIn, x, y, z, strength, isFlaming, isSmoking);
-        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
-        explosion.doExplosionA();
-        explosion.doExplosionB(false);
+        Explosion explosion = super.newExplosion(entityIn, x, y, z, strength, isFlaming, isSmoking);
 
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         if (!isSmoking)
         {
             explosion.clearAffectedBlockPositions();
@@ -1211,7 +1490,8 @@
             {
                 if (this.fireBlockEvent(blockeventdata))
                 {
-                    this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this.provider.getDimension(), new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
+                    // CraftBukkit - this.provider.dimension -> this.dimension  // Paper - dimension -> world
+                    this.mcServer.getPlayerList().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.getPosition().getX(), (double)blockeventdata.getPosition().getY(), (double)blockeventdata.getPosition().getZ(), 64.0D, this, new SPacketBlockAction(blockeventdata.getPosition(), blockeventdata.getBlock(), blockeventdata.getEventID(), blockeventdata.getEventParameter()));
                 }
             }
 
@@ -1298,11 +1578,19 @@
 
     public void spawnParticle(EnumParticleTypes particleType, boolean longDistance, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double particleSpeed, int... particleArguments)
     {
+        // CraftBukkit - visibility api support
+        sendParticles(null, particleType, longDistance, xCoord, yCoord, zCoord, numberOfParticles, xOffset, yOffset, zOffset, particleSpeed, particleArguments);
+    }
+
+    // Paper start - Particle API Expansion
+    public void sendParticles(@Nullable EntityPlayerMP sender, EnumParticleTypes particleType, boolean longDistance, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double particleSpeed, int... particleArguments) {
+        // CraftBukkit end
         SPacketParticles spacketparticles = new SPacketParticles(particleType, longDistance, (float)xCoord, (float)yCoord, (float)zCoord, (float)xOffset, (float)yOffset, (float)zOffset, (float)particleSpeed, numberOfParticles, particleArguments);
 
         for (int i = 0; i < this.playerEntities.size(); ++i)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)this.playerEntities.get(i);
+            if (sender != null && !entityplayermp.getBukkitEntity().canSee(sender.getBukkitEntity())) continue;
             this.sendPacketWithinDistance(entityplayermp, longDistance, xCoord, yCoord, zCoord, spacketparticles);
         }
     }
@@ -1367,4 +1655,5 @@
             {
             }
         }
+
 }
