--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -19,48 +19,32 @@
 
 package net.minecraftforge.common;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.BitSet;
-import java.util.Hashtable;
-import java.util.IdentityHashMap;
-import java.util.List;
-import java.util.ListIterator;
-import java.util.Map;
-import java.util.concurrent.ConcurrentMap;
-
-import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
-import it.unimi.dsi.fastutil.ints.IntIterator;
-import it.unimi.dsi.fastutil.ints.IntLinkedOpenHashSet;
-import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
-import it.unimi.dsi.fastutil.ints.IntRBTreeSet;
-import it.unimi.dsi.fastutil.ints.IntSet;
-import it.unimi.dsi.fastutil.ints.IntSets;
-import it.unimi.dsi.fastutil.ints.IntSortedSet;
-
 import com.google.common.collect.HashMultiset;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
 import com.google.common.collect.Multiset;
-
+import it.unimi.dsi.fastutil.ints.*;
+import java.io.File;
+import java.util.*;
+import java.util.concurrent.ConcurrentMap;
+import javax.annotation.Nullable;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.World;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.WorldProvider;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerMulti;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.world.*;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.util.EnumHelper;
 import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.world.WorldEvent.Load;
+import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
+import org.bukkit.World.Environment;
+import org.bukkit.WorldCreator;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.generator.ChunkGenerator;
 
-import javax.annotation.Nullable;
-
 public class DimensionManager
 {
     private static class Dimension
@@ -75,14 +59,16 @@
     }
 
     private static boolean hasInit = false;
+    private static int lastUsedId = 0;
 
     private static final Int2ObjectMap<WorldServer> worlds = Int2ObjectMaps.synchronize(new Int2ObjectLinkedOpenHashMap<>());
     private static final Int2ObjectMap<Dimension> dimensions = Int2ObjectMaps.synchronize(new Int2ObjectLinkedOpenHashMap<>());
     private static final IntSet keepLoaded = IntSets.synchronize(new IntOpenHashSet());
     private static final IntSet unloadQueue = IntSets.synchronize(new IntLinkedOpenHashSet());
-    private static final BitSet dimensionMap = new BitSet(Long.SIZE << 4);
+    private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDimensions = new ArrayList<Integer>(); // used to keep track of Bukkit dimensions
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
@@ -136,8 +122,13 @@
         dimensions.put(id, new Dimension(type));
         if (id >= 0)
         {
-            dimensionMap.set(id);
+            usedIds.add(id);
         }
+        // Kettle - register Environment to Bukkit
+        if (id != -1 && id != 0 && id != 1) // ignore vanilla
+        {
+            registerBukkitDimension(id, type.getName());
+        }
     }
 
     /**
@@ -209,11 +200,16 @@
         {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            // handle all worlds for bukkit
+            if(!FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.contains(world)){
+                FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.add(world);
+            }
             server.worldTickTimes.put(id, new long[100]);
             FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
         }
         else
         {
+            FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.remove(getWorld(id)); // Kettle - remove world from our new world arraylist
             worlds.remove(id);
             server.worldTickTimes.remove(id);
             FMLLog.log.info("Unloading dimension {}", id);
@@ -257,12 +253,40 @@
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
-        ISaveHandler savehandler = overworld.getSaveHandler();
-        //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
 
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        String worldType;
+        String name;
+        Environment environment = Environment.getEnvironment(dim);
+        if(dim >= -1 && dim <= 1){
+            if((dim == -1 && !mcServer.getAllowNether()) || (dim == 1 && mcServer.server.getAllowEnd())){
+                return;
+            }
+            worldType = environment.toString().toLowerCase();
+            name = "DIM" + dim;
+        }else{
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
+            if(org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId()) == null){
+                environment = DimensionManager.registerBukkitDimension(DimensionManager.getProviderType(dim).getId(), worldType);
+            }
+
+            name = provider.getSaveFolder();
+        }
+
+        ChunkGenerator generator = mcServer.server.getGenerator(name);
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        WorldInfo worldInfo = new WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, environment, generator).init()));
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        mcServer.server.getPluginManager().callEvent(new WorldLoadEvent(world.getWorld()));
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());
@@ -390,20 +414,7 @@
                 FMLLog.log.debug("Aborting unload for dimension {} as status changed", id);
                 continue;
             }
-            try
-            {
-                w.saveAllChunks(true, null);
-            }
-            catch (MinecraftException e)
-            {
-                FMLLog.log.error("Caught an exception while saving all chunks:", e);
-            }
-            finally
-            {
-                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                w.flush();
-                setWorld(id, null, w.getMinecraftServer());
-            }
+            FMLCommonHandler.instance().getMinecraftServerInstance().server.unloadWorld(w.getWorld(), true); // Kettle
         }
     }
 
@@ -412,42 +423,38 @@
      * block of free ids. Always call for each individual ID you wish to get.
      * @return the next free dimension ID
      */
-    public static int getNextFreeDimId() {
-        int next = 0;
-        while (true)
+    public static int getNextFreeDimId()
+    {
+        int next = lastUsedId;
+        while (usedIds.contains(next) || !checkAvailable(next))
         {
-            next = dimensionMap.nextClearBit(next);
-            if (dimensions.containsKey(next))
-            {
-                dimensionMap.set(next);
-            }
-            else
-            {
-                return next;
-            }
+            next++;
         }
+        return lastUsedId = next;
     }
 
-    public static NBTTagCompound saveDimensionDataMap()
+    private static boolean checkAvailable(int id)
     {
-        int[] data = new int[(dimensionMap.length() + Integer.SIZE - 1 )/ Integer.SIZE];
-        NBTTagCompound dimMap = new NBTTagCompound();
-        for (int i = 0; i < data.length; i++)
+        if (dimensions.containsKey(id))
         {
-            int val = 0;
-            for (int j = 0; j < Integer.SIZE; j++)
-            {
-                val |= dimensionMap.get(i * Integer.SIZE + j) ? (1 << j) : 0;
-            }
-            data[i] = val;
+            usedIds.add(id);
+            return false;
         }
-        dimMap.setIntArray("DimensionArray", data);
+        return true;
+    }
+
+    public static NBTTagCompound saveDimensionDataMap()
+    {
+        NBTTagCompound dimMap = new NBTTagCompound();
+        dimMap.setIntArray("UsedIDs", usedIds.toIntArray());
         return dimMap;
     }
 
     public static void loadDimensionDataMap(@Nullable NBTTagCompound compoundTag)
     {
-        dimensionMap.clear();
+        usedIds.clear();
+        lastUsedId = 0;
+
         if (compoundTag == null)
         {
             IntIterator iterator = dimensions.keySet().iterator();
@@ -456,18 +463,26 @@
                 int id = iterator.nextInt();
                 if (id >= 0)
                 {
-                    dimensionMap.set(id);
+                    usedIds.add(id);
                 }
             }
         }
         else
         {
+            for (int id : compoundTag.getIntArray("UsedIDs"))
+            {
+                usedIds.add(id);
+            }
+
+            // legacy data (load but don't save)
             int[] intArray = compoundTag.getIntArray("DimensionArray");
             for (int i = 0; i < intArray.length; i++)
             {
+                int data = intArray[i];
+                if (data == 0) continue;
                 for (int j = 0; j < Integer.SIZE; j++)
                 {
-                    dimensionMap.set(i * Integer.SIZE + j, (intArray[i] & (1 << j)) != 0);
+                    if ((data & (1 << j)) != 0) usedIds.add(i * Integer.SIZE + j);
                 }
             }
         }
@@ -495,4 +510,100 @@
             return null;
         }
     }
+
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings){
+        WorldServer overworld = getWorld(0);
+        if(overworld == null){
+            throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+        String name;
+
+        DimensionType type = DimensionType.OVERWORLD;
+        try{
+            if(creator.environment() != null){
+                type = DimensionType.getById(creator.environment().getId());
+            }
+        }catch (IllegalArgumentException e){
+
+        }
+
+        Environment environment = creator.environment();
+        name = creator.name();
+        int dim = 0;
+
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.dataFixer);
+
+        if(saveHandler.loadWorldInfo() != null){
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if(savedDim != 0 && savedDim != -1 && savedDim != 1){
+                dim = savedDim;
+            }
+        }
+        if(dim == 0){
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) // handle reloads properly
+        {
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+
+        ChunkGenerator generator = creator.generator();
+        if(mcServer instanceof DedicatedServer){
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldInfo worldInfo = saveHandler.loadWorldInfo();
+        if(worldInfo == null){
+            worldInfo = new WorldInfo(worldSettings, name);
+        }
+
+        WorldServer world = (WorldServer) new WorldServerMulti(mcServer, saveHandler, dim, overworld,mcServer.profiler, worldInfo, environment, generator).init();
+        world.initialize(worldSettings);
+        world.provider.setDimension(dim);
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new Load(world));
+        if(!mcServer.isSinglePlayer()){
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+        return world;
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        Environment env = Environment.getEnvironment(dim);
+        if(env == null){
+            worldType = worldType.replace("WorldProvider","");
+            env = EnumHelper.addBukkitEnvironment(dim,worldType.toUpperCase());
+            Environment.registerEnvironment(env);
+        }
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim)
+    {
+        if (!bukkitDimensions.contains(dim))
+            bukkitDimensions.add(dim);
+    }
+
+    public static void removeBukkitDimension(int dim)
+    {
+        if (bukkitDimensions.contains(dim))
+            bukkitDimensions.remove(bukkitDimensions.indexOf(dim));
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs()
+    {
+        return bukkitDimensions;
+    }
+
+    public static boolean isBukkitDimension(int dim)
+    {
+        return bukkitDimensions.contains(dim);
+    }
 }
