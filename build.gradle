import net.minecraftforge.gradle.user.TaskExtractAnnotations

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://jitpack.io" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

repositories {
	mavenLocal()
	mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
}

version = "${version_minecraft}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

minecraft {
    version = "${version_minecraft}-${version_forge}"
    mappings = "${version_mcp}"
    runDir = "run"

    serverJvmArgs += "-Dfml.coreMods.load=org.kettlemc.kettle.KettleCoreMod"

    makeObfSourceJar = false
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
}


def coreModManifest = {
    attributes "Maven-Artifact": "${group}:${mod_name}:${version}"
    attributes "FMLCorePlugin": "org.kettlemc.kettle.KettleCoreMod"
    attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
    attributes "TweakOrder": 0
    attributes "FMLCorePluginContainsFMLMod": true
    attributes "ForceLoadAsMod": true
}

jar {
    classifier = 'universal'

    manifest coreModManifest

    from sourceSets.main.output

    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            rename 'LICENSE.txt', 'org/spongepowered/LICENSE.txt'

            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.RSA'
            exclude 'META-INF/*.MF'

            exclude '**/*.html'
        }
    }


    rename '(.+_at.cfg)', 'META-INF/$1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'

    manifest coreModManifest

    from sourceSets.main.allSource
}

task deobfJar(type: Jar, dependsOn: reobfJar) {
    classifier = 'dev'

    manifest coreModManifest

    from sourceSets.main.output
}

task deobfJarExtractAnnotations(type: TaskExtractAnnotations, dependsOn: deobfJar) {
    jar = deobfJar.archivePath
}

deobfJar.finalizedBy deobfJarExtractAnnotations

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "mixins.kettle.refmap.json"
}

publishing {
    publications {
        mod(MavenPublication) {
            artifact deobfJar
            artifact sourcesJar

            from components.java
        }
    }

    repositories {
        def mavenSecretsPath = System.getenv("DEPLOY_PASSWORD")

        if (mavenSecretsPath != null) {
            def mavenSecretsFile = file(mavenSecretsPath).newReader()
            def mavenSecrets = new Properties()
            mavenSecrets.load(mavenSecretsFile)

            maven {
                url = "https://repo.openprocesses.ml/repository/kettle-dev/"

                credentials {
                    username = "kettleDeploy"
                    password = mavenSecrets.password
                }
            }
        }
    }
}

build.dependsOn deobfJar, sourcesJar